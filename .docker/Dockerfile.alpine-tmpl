ARG ARCH
ARG NODE_IMAGE_TAG

FROM $ARCH/node:$NODE_IMAGE_TAG

# Define ARGs again to make them available after FROM
ARG ARCH
ARG NODE_IMAGE_TAG
ARG QEMU_ARCH
ARG NODE_RED_VERSION

COPY tmp/qemu-$QEMU_ARCH-static /usr/bin/qemu-$QEMU_ARCH-static

# Copy ARCHs to ENVs to make them available at runtime
ENV ARCH=$ARCH
ENV NODE_IMAGE_TAG=$NODE_IMAGE_TAG
ENV NODE_RED_VERSION=$NODE_RED_VERSION

# Env variables holding file path for flows configuration
ENV FLOWS=flows.json
ENV NODE_PATH=/usr/src/node-red/node_modules:/data/node_modules

# Install tools only for node v8 based images
RUN if [ "$NODE_IMAGE_TAG" = "8-alpine" ]; then \
        apk add --update \
        git \
        openssh-keygen ; \
        rm -rf /var/cache/apk/* ; \
    fi

# Create Node-red application directory
RUN mkdir -p /usr/src/node-red

# Add node-red user and group (uid=1001 and gid=1001), so we aren't running as root.
RUN addgroup -g 1001 -S node-red && \
    adduser -S -h /usr/src/node-red -u 1001 node-red -G node-red

# Set owner of Node-red application directory
RUN chown -R node-red:node-red /usr/src/node-red

# User data directory: contains flows, config and nodes.
RUN mkdir /data && \
    chown -R node-red:node-red /data

# Run as node-red user
USER node-red

# Set work directory
WORKDIR /usr/src/node-red

# package.json contains Node-RED NPM module and node dependencies
COPY package.json /usr/src/node-red/
RUN npm install

# User configuration directory volume
VOLUME ["/data"]

# Expose the listening port of node-red
EXPOSE 1880

ENTRYPOINT ["npm", "start", "--", "--userDir", "/data"]
