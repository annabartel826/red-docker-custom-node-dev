sudo: required

dist: xenial

services: docker

language: bash

env:
  global:
    - TARGET=raymondmm/node-red
    - QEMU_VERSION=v4.0.0

  matrix:
    ### Node JS 12 ####################################################################################################
    # No Python Images
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=x86_64  ARCH=amd64   PYTHON_VERSION=0
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=arm     ARCH=arm32v6 PYTHON_VERSION=0
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=arm     ARCH=arm32v7 PYTHON_VERSION=0
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=aarch64 ARCH=arm64v8 PYTHON_VERSION=0

    # Python 2 Images
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=x86_64  ARCH=amd64   PYTHON_VERSION=2
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=arm     ARCH=arm32v6 PYTHON_VERSION=2
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=arm     ARCH=arm32v7 PYTHON_VERSION=2
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=aarch64 ARCH=arm64v8 PYTHON_VERSION=2

    # Python 3 Images
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=x86_64  ARCH=amd64   PYTHON_VERSION=3
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=arm     ARCH=arm32v6 PYTHON_VERSION=3
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=arm     ARCH=arm32v7 PYTHON_VERSION=3
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=aarch64 ARCH=arm64v8 PYTHON_VERSION=3

    # Devtools Images
    # Python 3 Images
#    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=x86_64  ARCH=amd64   PYTHON_VERSION=3 DEVTOOLS=1
#    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=arm     ARCH=arm32v6 PYTHON_VERSION=3 DEVTOOLS=1
#    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=arm     ARCH=arm32v7 PYTHON_VERSION=3 DEVTOOLS=1
#    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=12 OS=alpine QEMU_ARCH=aarch64 ARCH=arm64v8 PYTHON_VERSION=3 DEVTOOLS=1

    ### Node JS 10 ####################################################################################################
    # No Python Images
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=x86_64  ARCH=amd64   PYTHON_VERSION=0
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=arm     ARCH=arm32v6 PYTHON_VERSION=0
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=arm     ARCH=arm32v7 PYTHON_VERSION=0
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=aarch64 ARCH=arm64v8 PYTHON_VERSION=0

    # Python 2 Images
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=x86_64  ARCH=amd64   PYTHON_VERSION=2
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=arm     ARCH=arm32v6 PYTHON_VERSION=2
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=arm     ARCH=arm32v7 PYTHON_VERSION=2
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=aarch64 ARCH=arm64v8 PYTHON_VERSION=2

    # Python 3 Images
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=x86_64  ARCH=amd64   PYTHON_VERSION=3
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=arm     ARCH=arm32v6 PYTHON_VERSION=3
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=arm     ARCH=arm32v7 PYTHON_VERSION=3
    - DOCKER_FILE=Dockerfile.alpine NODE_VERSION=10 OS=alpine QEMU_ARCH=aarch64 ARCH=arm64v8 PYTHON_VERSION=3

before_install:
  - ./.docker/docker.sh prepare

install: true

before_script:
    # Set BUILD_VERSION
    - if [ ! -z "${TRAVIS_TAG}" ]; then export BUILD_VERSION=${TRAVIS_TAG:1}; else export BUILD_VERSION=beta; fi

    # Set NODE_RED_VERSION
    - >
      export NODE_RED_VERSION=$(grep -Eo "\"node-red\": \"(\w*.\w*.\w*)" package.json | cut -d\" -f4)

script:
  # Build Docker image
  - ./.docker/docker.sh build

  # Test Docker image
  - ./.docker/docker.sh test

  # Push Docker image
  - >
    if [ ! -z "${TRAVIS_TAG}" ]; then
      # Tag Docker image
      ./.docker/docker.sh tag

      # Docker Login
      echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      # Push Docker image
      ./.docker/docker.sh push

      # Docker Logout
      docker logout
    fi

jobs:
    include:
        - stage: manifest
          if: tag =~ ^v
          script:
              # Create and push Docker manifest lists
              # Docker Login
              - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

              # Create and Push Docker Manifest Lists to Docker Hub
              - echo "Create manifest list for Node 12 docker images."
              - ./.docker/docker.sh manifest-list "-12"

              - echo "Create manifest list for Node 10 docker images."
              - ./.docker/docker.sh manifest-list "-10"

              # Docker Logout
              - docker logout

# notify me when things fail
notifications:
    email: true
