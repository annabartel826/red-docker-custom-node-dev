# make use of vm's
sudo: 'required'

# have the docker service set up (we'll update it later)
services:
  - 'docker'

language:
  - 'bash'

env:
  global:
      - QEMU_VERSION=v2.11.1
      - NODE_RED_VERSION=0.18.4
      - IMAGE=raymondmm/node-red-test

before_install:
  # Prepare the machine before any code installation scripts
  - './.travis/main.sh'

  # Prepare qemu
  - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  - mkdir tmp
  - >
    pushd tmp &&
    curl -L -o qemu-arm-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/$QEMU_VERSION/qemu-arm-static.tar.gz &&
    tar xzf qemu-arm-static.tar.gz &&
    curl -L -o qemu-aarch64-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/$QEMU_VERSION/qemu-aarch64-static.tar.gz &&
    tar xzf qemu-aarch64-static.tar.gz &&
    popd

script:
  # node v6 images
  - docker build --build-arg ARCH=amd64 --build-arg NODE_VERSION=6-slim --file Dockerfile.template-debian --tag $IMAGE:latest-v6-linux-amd64 .
  #- docker build --build-arg ARCH=arm32v6 --build-arg NODE_VERSION=6-alpine --file Dockerfile.template-alpine --tag $IMAGE:latest-v6-linux-arm32v6 .
  - docker build --build-arg ARCH=arm32v7 --build-arg NODE_VERSION=6-slim --file Dockerfile.template-debian --tag $IMAGE:latest-v6-linux-arm32v7 .
  - docker build --build-arg ARCH=arm64v8 --build-arg NODE_VERSION=6-slim --file Dockerfile.template-debian --tag $IMAGE:latest-v6-linux-arm64v8 .

  # node v8 images
  - docker build --build-arg ARCH=amd64 --build-arg NODE_VERSION=8-slim --file Dockerfile.template-debian --tag $IMAGE:latest-v8-linux-amd64 .
  - docker build --build-arg ARCH=arm32v6 --build-arg NODE_VERSION=8-alpine --file Dockerfile.template-alpine --tag $IMAGE:latest-v8-linux-arm32v6 .
  - docker build --build-arg ARCH=arm32v7 --build-arg NODE_VERSION=8-slim --file Dockerfile.template-debian --tag $IMAGE:latest-v8-linux-arm32v7 .
  - docker build --build-arg ARCH=arm64v8 --build-arg NODE_VERSION=8-slim --file Dockerfile.template-debian --tag $IMAGE:latest-v8-linux-arm64v8 .

after_success:
  - >
    if [[ "$TRAVIS_BRANCH" == "master" ]]; then
      echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin;

      # Tag node v6 images
      docker tag $IMAGE:latest-v6-linux-amd64 $IMAGE:$NODE_RED_VERSION-v6-linux-amd64
      #docker tag $IMAGE:latest-v6-linux-arm32v6 $IMAGE:$NODE_RED_VERSION-v6-linux-arm32v6
      docker tag $IMAGE:latest-v6-linux-arm32v7 $IMAGE:$NODE_RED_VERSION-v6-linux-arm32v7
      docker tag $IMAGE:latest-v6-linux-arm64v8 $IMAGE:$NODE_RED_VERSION-v6-linux-arm64v8

      # Tag node v8 images
      docker tag $IMAGE:latest-v8-linux-amd64 $IMAGE:$NODE_RED_VERSION-v8-linux-amd64
      docker tag $IMAGE:latest-v8-linux-arm32v6 $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v6
      docker tag $IMAGE:latest-v8-linux-arm32v7 $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v7
      docker tag $IMAGE:latest-v8-linux-arm64v8 $IMAGE:$NODE_RED_VERSION-v8-linux-arm64v8

      # Push node v6 images
      docker push $IMAGE:latest-v6-linux-amd64
      docker push $IMAGE:$NODE_RED_VERSION-v6-linux-amd64

      #docker push $IMAGE:latest-v6-linux-arm32v6
      #docker push $IMAGE:$NODE_RED_VERSION-v6-linux-arm32v6

      docker push $IMAGE:latest-v6-linux-arm32v7
      docker push $IMAGE:$NODE_RED_VERSION-v6-linux-arm32v7

      docker push $IMAGE:latest-v6-linux-arm64v8
      docker push $IMAGE:$NODE_RED_VERSION-v6-linux-arm64v8

      # Push node v8 images
      docker push $IMAGE:latest-v8-linux-amd64
      docker push $IMAGE:$NODE_RED_VERSION-v8-linux-amd64

      docker push $IMAGE:latest-v8-linux-arm32v6
      docker push $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v6

      docker push $IMAGE:latest-v8-linux-arm32v7
      docker push $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v7

      docker push $IMAGE:latest-v8-linux-arm64v8
      docker push $IMAGE:$NODE_RED_VERSION-v8-linux-arm64v8


      # Manifest Create v6
      docker manifest create $IMAGE:$NODE_RED_VERSION-v6 \
        $IMAGE:$NODE_RED_VERSION-v6-linux-amd64 \
        $IMAGE:$NODE_RED_VERSION-v6-linux-arm32v7 \
        $IMAGE:$NODE_RED_VERSION-v6-linux-arm64v8

      # Manifest Annotate v6
      #docker manifest annotate $IMAGE:$NODE_RED_VERSION-v6 $IMAGE:$NODE_RED_VERSION-v6-linux-arm32v6 --os=linux --arch=arm --variant=v6
      docker manifest annotate $IMAGE:$NODE_RED_VERSION-v6 $IMAGE:$NODE_RED_VERSION-v6-linux-arm32v7 --os=linux --arch=arm --variant=v7
      docker manifest annotate $IMAGE:$NODE_RED_VERSION-v6 $IMAGE:$NODE_RED_VERSION-v6-linux-arm64v8 --os=linux --arch=arm64 --variant=v8

      # Manifest Push v6
      docker manifest push $IMAGE:$NODE_RED_VERSION-v6


      # Manifest Create v8
      docker manifest create $IMAGE:$NODE_RED_VERSION-v8 \
        $IMAGE:$NODE_RED_VERSION-v8-linux-amd64 \
        $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v6 \
        $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v7 \
        $IMAGE:$NODE_RED_VERSION-v8-linux-arm64v8

      # Manifest Annotate v8
      docker manifest annotate $IMAGE:$NODE_RED_VERSION-v8 $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v6 --os=linux --arch=arm --variant=v6
      docker manifest annotate $IMAGE:$NODE_RED_VERSION-v8 $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v7 --os=linux --arch=arm --variant=v7
      docker manifest annotate $IMAGE:$NODE_RED_VERSION-v8 $IMAGE:$NODE_RED_VERSION-v8-linux-arm64v8 --os=linux --arch=arm64 --variant=v8

      # Manifest Push v8
      docker manifest push $IMAGE:$NODE_RED_VERSION-v8





      # Manifest Create NODE_RED_VERSION
      docker manifest create $IMAGE:$NODE_RED_VERSION \
      $IMAGE:$NODE_RED_VERSION-v8-linux-amd64 \
      $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v6 \
      $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v7 \
      $IMAGE:$NODE_RED_VERSION-v8-linux-arm64v8

      # Manifest Annotate NODE_RED_VERSION
      docker manifest annotate $IMAGE:$NODE_RED_VERSION $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v6 --os=linux --arch=arm --variant=v6
      docker manifest annotate $IMAGE:$NODE_RED_VERSION $IMAGE:$NODE_RED_VERSION-v8-linux-arm32v7 --os=linux --arch=arm --variant=v7
      docker manifest annotate $IMAGE:$NODE_RED_VERSION $IMAGE:$NODE_RED_VERSION-v8-linux-arm64v8 --os=linux --arch=arm64 --variant=v8

      # Manifest Push NODE_RED_VERSION
      docker manifest push $IMAGE:$NODE_RED_VERSION

      # Manifest Create LATEST
      docker manifest create $IMAGE:latest \
      $IMAGE:latest-v8-linux-amd64 \
      $IMAGE:latest-v8-linux-arm32v6 \
      $IMAGE:latest-v8-linux-arm32v7 \
      $IMAGE:latest-v8-linux-arm64v8

      # Manifest Annotate LATEST
      docker manifest annotate $IMAGE:latest $IMAGE:latest-v8-linux-arm32v6 --os=linux --arch=arm --variant=v6
      docker manifest annotate $IMAGE:latest $IMAGE:latest-v8-linux-arm32v7 --os=linux --arch=arm --variant=v7
      docker manifest annotate $IMAGE:latest $IMAGE:latest-v8-linux-arm64v8 --os=linux --arch=arm64 --variant=v8

      # Manifest Push LATEST
      docker manifest push $IMAGE:latest

    fi

# don't notify me when things fail
notifications:
  email: false
