ARG ARCH=amd64
ARG NODE_VERSION=10
ARG OS=alpine
ARG NODE_RED_VERSION

FROM ${ARCH}/node:${NODE_VERSION}-${OS}

# Basic build-time metadata as defined at http://label-schema.org
ARG BUILD_DATE
ARG BUILD_VERSION
ARG BUILD_REF
ARG NODE_RED_VERSION
ARG ARCH
LABEL org.label-schema.build-date=${BUILD_DATE} \
    org.label-schema.docker.dockerfile=".docker/Dockerfile.alpine" \
    org.label-schema.license="GNU" \
    org.label-schema.name="Node-RED" \
    org.label-schema.version=${BUILD_VERSION} \
    org.label-schema.description="Node-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways." \
    org.label-schema.url="https://nodered.org" \
    org.label-schema.vcs-ref=${BUILD_REF} \
    org.label-schema.vcs-type="Git" \
    org.label-schema.vcs-url="https://github.com/RaymondMouthaan/node-red-docker" \
    org.label-schema.arch=${ARCH} \
    maintainer="Raymond M Mouthaan <raymondmmouthaan@gmail.com>"

SHELL ["/bin/bash", "-c"]

# QEMU - Quick Emulation: Run operating systems for any machine, on any supported architecture.
ARG QEMU_ARCH=x86_64
COPY tmp/qemu-$QEMU_ARCH-static /usr/bin/qemu-$QEMU_ARCH-static

# Install Python 2 & gpio library (Python 2.7 will reach the end of its life on January 1st, 2020!)
ARG PYTHON_VERSION=0
RUN bash && set -ex && \
    if [[ "${PYTHON_VERSION}" == "2" ]]; then \
        echo "Installing Python 2"; \
        apt-get update && apt-get install -y --no-install-recommends python; \
        if [[ "${ARCH}" == "arm32v6" ]]; then \
            echo "Installing python-pigpio"; \
            apt-get install -y --no-install-recommends python-pigpio; \
        fi; \
    fi

# Install Python 3 & gpio library
RUN set -ex && \
    if [[ "${PYTHON_VERSION}" == "3" ]]; then \
        echo "Installing Python 3"; \
        apt-get update && apt-get update && apt-get install -y --no-install-recommends python3; \
        echo "Fixing Python 3 symlink"; \
        ln -s /usr/bin/python3 /usr/bin/python; \
        if [[ "${ARCH}" == "arm32v6" ]]; then \
            echo "Installing py-rpigpio"; \
            apt-get install -y --no-install-recommends python3-pigpio; \
        fi; \
    fi

# Install tools, create Node-RED app and data dir, add user and set rights
RUN set -ex && \
    apt-get update && apt-get install -y --no-install-recommends \
        iputils-ping \
        curl \
        nano \
        git \
        openssh-client && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /usr/src/node-red /data && \
    useradd --home-dir /usr/src/node-red --no-create-home node-red && \
    chown -R node-red:node-red /data && \
    chown -R node-red:node-red /usr/src/node-red

# Set work directory
WORKDIR /usr/src/node-red

# Run as node-red user
USER node-red

# package.json contains Node-RED NPM module and node dependencies
COPY package.json /usr/src/node-red/
RUN npm install

# Replace Python 2.7 with 3.6 in 36-rpi-gpio.js or remove Node-RED build-in rpi-gpio for non arm32v6
USER root
RUN set -ex && \
    if [[ "${PYTHON_VERSION}" == "3" ]] && [[ "${ARCH}" == "arm32v7" ]]; then \
            echo "Fixing 36-rpi-gpio.js for Python 3.6"; \
            sed -i 's/python2.7/python3.6/g' node_modules/\@node-red/nodes/core/hardware/36-rpi-gpio.js; \
    fi && \
    if [[ "${ARCH}" != "arm32v7" ]]; then \
        echo "Removing Node-RED build-in rpi-gpio"; \
        rm -r node_modules/\@node-red/nodes/core/hardware/*; \
    fi

# Return as node-red user
USER node-red

# Env variables
ENV NODE_RED_VERSION=$NODE_RED_VERSION
ENV FLOWS=flows.json
ENV NODE_PATH=/usr/src/node-red/node_modules:/data/node_modules

# User configuration directory volume
VOLUME ["/data"]

# Expose the listening port of node-red
EXPOSE 1880

HEALTHCHECK --interval=5s --timeout=3s --retries=3 \
      CMD curl -f http://localhost:1880 || exit 1

ENTRYPOINT ["npm", "start", "--", "--userDir", "/data"]
